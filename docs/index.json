[
{
	"uri": "https://wiki.browniealice.net/technote/hugo/how_to_use_hugo/",
	"title": "Hugo使い方",
	"tags": ["Hugo"],
	"description": "",
	"content": "Hugoについて 静的Webページ変換ツールの1つ. 他にもJekyllやHexoなどが有名.\n基本的にはMarkdownで記事を書き, Hugoを起動して変換してもらって所定の静的なWebページを作る. スタイルなどを調整してやればBlogみたいなWebページもできる.\nBlogとwikiについて ブログはHugoを用いてGitHub Pages上で公開している. BlogはAlice in the Machine - Blogにある.\nwikiも同様にしてGitHub Pages上で公開している. wikiはAlice in the Machine - wikiにある.\nHugoインストール Install Hugoを参考にすれば良い. Ubuntuのバイナリインストールでいいなら\nsnap install hugo で完了.\nHugo初期設定 既にレポジトリがある場合やる必要はないが, 新たにWebページを作成するなら必要.\nHugo new site hoge で hoge ディレクトリに新たなHugoのワークスペースができる. あとは hoge ディレクトリに移動して以下をやっておく.\ngit init . git remote add origin https://github.com/\u0026lt;user-name\u0026gt;/hoge.git git add * git commit -m \u0026#34;Init Hugo.\u0026#34; git push -u origin master こうすれば後は普通に記事制作するだけで済む.\nテーマ Hugoは自分の思うテーマを選んでやらないと, 思ったようなWebページはできない. テーマは Hugo Themes|CompleteList に一覧になっている. 導入したいテーマが見つかったら\ngit submodule add https://github.com/hoge/poyo.git themes/piyo で導入する. あとはそのテーマに合わせてフロントマターや config.toml を編集する.\nconfig.toml でテーマを設定するには\ntheme = \u0026#34;piyo\u0026#34; とするだけでよい. 他にもテーマ依存の設定などもしていく.\nconfig.toml サイトについての情報などは基本的に config.toml で設定する.\n例えば以下のようにする.\nbaseURL = \u0026#34;hoge\u0026#34; languageCode = \u0026#34;ja-JP\u0026#34; title = \u0026#34;poyo\u0026#34; theme = \u0026#34;piyo\u0026#34; publishDir = \u0026#34;docs\u0026#34; disqusShortname = \u0026#34;foo\u0026#34; copyright = \u0026#34;Copyleft; 2017-2017, BrownieAlice. All rights reversed.\u0026#34; GitHub Pages Github Pagesを用いてWebサイトを公開するなら少し設定を変更する必要がある.\nGiuHub側 リポジトリのページを開いて Settings -\u0026gt; GutHub Pages -\u0026gt; Source -\u0026gt; master branch /docs folder と設定して保存する.\nするとmasterブランチの docs フォルダ 以下がWebページだとみなしてWebサイトにしてくれる.\nHugo側 config.toml を少しいじる.\npublishDir = \u0026#34;docs\u0026#34; こうすると docs フォルダ以下にHTMLなどが生成されるようになる.\n環境構築 Blog すでに中身はgit上で公開しているので\ncd ~/Document git clone https://github.com/BrownieAlice/blog.git cd blog git submodule update --init でよい. あとは ~/Document/blog 上で作業する.\nwiki Blogと同様.\ncd ~/Document git clone https://github.com/BrownieAlice/wiki.git cd wiki git submodule update --init で, あとは ~/Document/wiki 上で作業する.\n記事の制作 以下が一連の動作.\nhugo new post/hoge.md hugo server -D -w hugo undraft content/post/hoge.md hugo git add * git commit -m \u0026#34;new post hoge\u0026#34; git push origin master hugo server でローカルにサーバーを立ち上げてブラウザ上で確認できるようになる. Blogなら http://localhost:1313/blog がそのリンク先.\nそして下書き記事を正式な記事にしてコンパイルし変更をコミットする.\nカテゴリー カテゴリとしてpoとpopoを追加する場合, 記事のフロントマターを以下のように設定する.\n--- title: \u0026#34;hoge\u0026#34; date: piyo categories : - \u0026#34;po\u0026#34; - \u0026#34;popo\u0026#34; --- 参考サイト  GitHub Pagesでブログ立ち上げ - Hugoを使う GitHub Pagesの新機能、ソース設定が地味にいい 静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編１） HugoとGitHub Pagesで静的サイトを公開する - Qiita Hugo + Github Pagesでブログを公開してみた - Qiita  "
},
{
	"uri": "https://wiki.browniealice.net/technote/hugo/setting_for_robust/",
	"title": "Robust設定",
	"tags": ["Hugo"],
	"description": "",
	"content": "Robustについて RobustはHugoのテーマの1つ. リポジトリは https://github.com/dim0627/hugo_theme_robust.gitにある.\n設定項目 Robustの機能として設定できる項目.\nタグ/カテゴリ/シリーズの利用 タグ/カテゴリ/シリーズの分類機能を使うには config.toml を少し編集する必要がある. 以下を追記する.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; series = \u0026#34;series\u0026#34; また, 記事にカテゴリを割り当てる際はフロントマターを以下のように設定する.\n--- title: \u0026#34;hoge\u0026#34; date: piyo categories : - \u0026#34;po\u0026#34; - \u0026#34;popo\u0026#34; --- 記事要約部分の日本語対応 デフォルトだと記事の要約として表示される分量が異常に多い. 日本語として適切な長さにするためには config.toml に以下を追記する.\nhasCJKLanguage = true サムネイル設定 記事のサムネイルも設定できる.\nデフォルトサムネイル お好みの画像をjpgファイルにして static/images/default.jpg におけば良い.\nカスタムサムネイル 各記事に個別にサムネイルを設定することもできる. 記事のフロントマターに以下を追記すれば良い.\nthumbnail: \u0026#34;images/hoge/thumbnail.jpg\u0026#34; すると static/images/hoge/thumnail.jpg がサムネイル画像になる. サムネイル画像自体はpngでもsvgでも入れてくれる. 要はブラウザ側がそのファイル形式に対応できているかによる.\n目次の割当 記事の最初に目次をつけることもできる. デフォルトでは挿入されないが, フロントマターに以下を追記すると目次が表示されるようになる.\ntoc: true Author設定 右のサイドバーの著者情報は config.toml を編集することで設定できる. 例えば以下のように設定する.\n[params.author] thumbnail = \u0026#34;images/author.png\u0026#34; name = \u0026#34;BrownieAlice\u0026#34; description = \u0026#34;\u0026#34;\u0026#34; \u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt; 工業大学に通う大学院生. \u0026lt;br\u0026gt; ロボコンに参加したことがあったり? \u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;https://blog.browniealice.net\u0026#34;\u0026gt;Blog\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;https://wiki.browniealice.net\u0026#34;\u0026gt;wiki\u0026lt;/a\u0026gt; / \u0026lt;a href=\u0026#34;https://github.com/BrownieAlice/blog.git\u0026#34;\u0026gt;Repository\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;\u0026#34;\u0026#34;\u0026#34; github = \u0026#34;https://github.com/BrownieAlice\u0026#34; 画像の挿入 画像はShortcodeを使って挿入できる. 以下を本文中に挿入すれば良い. ただしShortcodeの前後は空行にしておくこと.\n{{% img src=\u0026#34;images/foo/bar.jpg\u0026#34; w=\u0026#34;600\u0026#34; h=\u0026#34;400\u0026#34; caption=\u0026#34;hoge\u0026#34; href=\u0026#34;https://example.com\u0026#34; %}} captionとhrefは省略可能.\ndisqus導入 disqusに登録してshort nameを貰えれば, 後は config.toml を以下のように設定するだけで利用できる.\ndisqusShortname = \u0026#34;hoge\u0026#34; copyright追加 copyrightを追加する. config.toml を以下のように設定した.\ncopyright = \u0026#34;Copyright \u0026amp;copy; 2017-2017, BrownieAlice.\u0026lt;br\u0026gt;\u0026lt;a rel=\u0026#39;license\u0026#39; href=\u0026#39;http://creativecommons.org/licenses/by-sa/4.0/\u0026#39;\u0026gt;\u0026lt;img alt=\u0026#39;クリエイティブ・コモンズ・ライセンス\u0026#39; style=\u0026#39;border-width:0\u0026#39; src=\u0026#39;https://i.creativecommons.org/l/by-sa/4.0/80x15.png\u0026#39; /\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt;このサイトのテキストは原則として \u0026lt;a rel=\u0026#39;license\u0026#39; href=\u0026#39;http://creativecommons.org/licenses/by-sa/4.0/\u0026#39;\u0026gt;クリエイティブ・コモンズ 表示 - 継承 4.0 国際 ライセンス\u0026lt;/a\u0026gt; の下に提供されています.\u0026#34; カスタマイズ 一部はRobustのthemeを直接いじらないと設定できない.\nfavicon追加 iPhone向けのlogoは static/images/logo.png を配置すればすむ. ただ普通は林檎みたいな産業廃棄物は使わないのでちゃんと設定しないといけない.\nlayouts/partials フォルダに meta.html を作り中身を以下のようにする.\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;pinterest\u0026#34; content=\u0026#34;nopin\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,minimum-scale=1,initial-scale=1\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;#263238\u0026#34;\u0026gt; {{ with .Site.Params.contact }}\u0026lt;meta name=\u0026#34;contact\u0026#34; content=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }} {{ .Hugo.Generator }} \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; href=\u0026#34;{{ .Site.BaseURL }}images/logo.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; type=\u0026#34;image/x-icon\u0026#34; href=\u0026#34;{{ .Site.BaseURL }}favicon.ico\u0026#34;\u0026gt; {{ with .RSSLink }}\u0026lt;link rel=\u0026#34;alternate\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;RSS\u0026#34; href=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }} \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; そうしたあと static フォルダに favicon.ico を配置すればアイコンが表示されるようになる.\n参考サイト dim0627/hugo_theme_robust\nHUGO のテーマ Robust のカスタマイズ - zzzmisa's blog\nGithub Pages/Hugoでブログを作成してみた - A1 Blog\n"
},
{
	"uri": "https://wiki.browniealice.net/technote/hugo/setting_for_docdock/",
	"title": "DocDock設定",
	"tags": ["Hugo"],
	"description": "",
	"content": "DocDockについて DocDockはHugoのテーマの1つ. デモページのようなドキュメント用のページを作ることができる.\nリポジトリはhttps://github.com/vjeantet/hugo-theme-docdock.gitにある.\n設定項目 DocDockの機能として設定できる項目.\nタグ/カテゴリ/シリーズの利用 タグを利用するなら config.toml に\n[taxonomies] tag = \u0026#34;tags\u0026#34; と設定した上で, 各ページのフロントマター部に\ntags: - \u0026#34;Hugo\u0026#34; と記載すれば良い.\n日本語記事が主な場合, タグの一覧ページの概要を見やすくするために config.toml に\nhasCJKLanguage = true と設定したほうが良い.\nメニューバーの追加 最上部メニューバーにリンクを追加するには, config.toml に以下のように付け加えればよい.\n[[menu.shortcuts]] name = \u0026#34;Blog\u0026#34; url = \u0026#34;https://blog.browniealice.net\u0026#34; weight = 30 identifier = \u0026#34;blog\u0026#34; [[menu.shortcuts]] name = \u0026#34;wiki\u0026#34; url = \u0026#34;https://wiki.browniealice.net\u0026#34; weight = 31 identifier = \u0026#34;wiki\u0026#34; カスタマイズ 一部はDocDockのthemeを直接いじらないと設定できない.\n左のバーにコピーライトを追加した場合, layouts/partials フォルダを作り menu-footer.html を追加し中身を以下のようにする.\n\u0026lt;p style=\u0026#34;text-align:center;\u0026#34;\u0026gt; Copyright \u0026amp;copy; 2017-2019, BrownieAlice.\u0026lt;br\u0026gt; \u0026lt;a rel=\u0026#39;license\u0026#39; href=\u0026#39;http://creativecommons.org/licenses/by-sa/4.0/\u0026#39;\u0026gt; \u0026lt;img alt=\u0026#39;クリエイティブ・コモンズ・ライセンス\u0026#39; style=\u0026#39;border-width:0\u0026#39; src=\u0026#39;https://i.creativecommons.org/l/by-sa/4.0/80x15.png\u0026#39; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; "
},
{
	"uri": "https://wiki.browniealice.net/tags/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wiki.browniealice.net/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wiki.browniealice.net/technote/hugo/",
	"title": "Hugo",
	"tags": ["Hugo"],
	"description": "",
	"content": "Hugoについて Hugo は静的サイトジェネレータの1つ. Markdownで記事を書いて所定のプログラムを動かせば静的なサイトが生成される.\n直接HTMLを叩かなくて済むので楽. またGitHub Pagesを用いれば簡単にWebサイトを公開できるので便利.\nBlog と wiki もHugoを用いて作成している\n"
},
{
	"uri": "https://wiki.browniealice.net/technote/",
	"title": "TechNote",
	"tags": [],
	"description": "",
	"content": "TechNoteについて プログラミング関連の事項をまとめています.\n"
},
{
	"uri": "https://wiki.browniealice.net/_header/",
	"title": "_Header",
	"tags": [],
	"description": "",
	"content": "Alice in the Machine - wiki\n"
},
{
	"uri": "https://wiki.browniealice.net/",
	"title": "Alice in the Machine - wiki",
	"tags": [],
	"description": "",
	"content": "Alice in the Machine - wiki このサイトについて このサイトは私が備忘録として主に技術的な知見やまとめを記載しています.\n左のサイドバーから記事一覧を確認できます.\n"
}]