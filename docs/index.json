[
{
	"uri": "https://wiki.browniealice.net/technote/hugo/how_to_use_hugo/",
	"title": "Hugo使い方",
	"tags": [],
	"description": "",
	"content": " Hugoについて 静的Webページ変換ツールの1つ. 他にもJekyllやHexoなどが有名.\n基本的にはMarkdownで記事を書き, Hugoを起動して変換してもらって所定の静的なWebページを作る. スタイルなどを調整してやればBlogみたいなWebページもできる.\nBlogとwikiについて ブログはHugoを用いてGitHub Pages上で公開している. BlogはAlice in the Machine - Blogにある.\nwikiも同様にしてGitHub Pages上で公開している. wikiはAlice in the Machine - wikiにある.\nHugoインストール Install Hugoを参考にすれば良い. Ubuntuのバイナリインストールでいいなら\nsnap install hugo  で完了.\nHugo初期設定 既にレポジトリがある場合やる必要はないが, 新たにWebページを作成するなら必要.\nHugo new site hoge  で hoge ディレクトリに新たなHugoのワークスペースができる. あとは hoge ディレクトリに移動して以下をやっておく.\ngit init . git remote add origin https://github.com/\u0026lt;user-name\u0026gt;/hoge.git git add * git commit -m \u0026quot;Init Hugo.\u0026quot; git push -u origin master  こうすれば後は普通に記事制作するだけで済む.\nテーマ Hugoは自分の思うテーマを選んでやらないと, 思ったようなWebページはできない. テーマは Hugo Themes|CompleteList に一覧になっている. 導入したいテーマが見つかったら\ngit submodule add https://github.com/hoge/poyo.git themes/piyo  で導入する. あとはそのテーマに合わせてフロントマターや config.toml を編集する.\nconfig.toml でテーマを設定するには\ntheme = \u0026quot;piyo\u0026quot;  とするだけでよい. 他にもテーマ依存の設定などもしていく.\nconfig.toml サイトについての情報などは基本的に config.toml で設定する.\n例えば以下のようにする.\nbaseURL = \u0026quot;hoge\u0026quot; languageCode = \u0026quot;ja-JP\u0026quot; title = \u0026quot;poyo\u0026quot; theme = \u0026quot;piyo\u0026quot; publishDir = \u0026quot;docs\u0026quot; disqusShortname = \u0026quot;foo\u0026quot; copyright = \u0026quot;Copyleft; 2017-2017, BrownieAlice. All rights reversed.\u0026quot;  GitHub Pages Github Pagesを用いてWebサイトを公開するなら少し設定を変更する必要がある.\nGiuHub側 リポジトリのページを開いて Settings -\u0026gt; GutHub Pages -\u0026gt; Source -\u0026gt; master branch /docs folder と設定して保存する.\nするとmasterブランチの docs フォルダ 以下がWebページだとみなしてWebサイトにしてくれる.\nHugo側 config.toml を少しいじる.\npublishDir = \u0026quot;docs\u0026quot;  こうすると docs フォルダ以下にHTMLなどが生成されるようになる.\n環境構築 Blog すでに中身はgit上で公開しているので\ncd ~/Document git clone https://github.com/BrownieAlice/blog.git cd blog git submodule update --init  でよい. あとは ~/Document/blog 上で作業する.\nwiki Blogと同様.\ncd ~/Document git clone https://github.com/BrownieAlice/wiki.git cd wiki git submodule update --init  で, あとは ~/Document/wiki 上で作業する.\n記事の制作 以下が一連の動作.\nhugo new post/hoge.md hugo server -D -w hugo undraft content/post/hoge.md hugo git add * git commit -m \u0026quot;new post hoge\u0026quot; git push origin master  hugo server でローカルにサーバーを立ち上げてブラウザ上で確認できるようになる. Blogなら http://localhost:1313/blog がそのリンク先.\nそして下書き記事を正式な記事にしてコンパイルし変更をコミットする.\nカテゴリー カテゴリとしてpoとpopoを追加する場合, 記事のフロントマターを以下のように設定する.\n--- title: \u0026quot;hoge\u0026quot; date: piyo categories : - \u0026quot;po\u0026quot; - \u0026quot;popo\u0026quot; ---  参考サイト  GitHub Pagesでブログ立ち上げ - Hugoを使う GitHub Pagesの新機能、ソース設定が地味にいい 静的サイトジェネレータHugoを使ったサイト構築（コンテンツ編１） HugoとGitHub Pagesで静的サイトを公開する - Qiita Hugo + Github Pagesでブログを公開してみた - Qiita  "
},
{
	"uri": "https://wiki.browniealice.net/technote/hugo/setting_for_robust/",
	"title": "Robust設定",
	"tags": [],
	"description": "",
	"content": " Robustについて RobustはHugoのテーマの1つ. デモページのようなブログ風のページを作ることができる.\nリポジトリは https://github.com/dim0627/hugo_theme_robust.git にある.\n標準設定 HugoやRobust自体の標準で設定する必要のある事.\nタグ/カテゴリ/シリーズの利用 タグ/カテゴリ/シリーズの分類機能を使うには config.toml を少し編集してやる必要がある. 以下を追記する.\n[taxonomies] tag = \u0026quot;tags\u0026quot; category = \u0026quot;categories\u0026quot; series = \u0026quot;series\u0026quot;  また, 記事にカテゴリを割り当てる際はフロントマターを以下のように設定する.\n--- title: \u0026quot;hoge\u0026quot; date: piyo categories : - \u0026quot;po\u0026quot; - \u0026quot;popo\u0026quot; ---  記事要約部分の日本語対応 デフォルトだと要約されて表示される記事の文面がかなり長めに表示される. それを日本語用に適切な長さにするためには config.toml に以下を追記する.\nhasCJKLanguage = true  サムネイル設定 記事のサムネイルも設定できる.\nデフォルトサムネイル お好みの画像をjpgファイルにして static/images/default.jpg におけば良い.\nカスタムサムネイル 各記事に個別にサムネイルを設定することもできる. 記事のフロントマターに以下を追記すれば良い.\nthumbnail: \u0026quot;images/hoge/thumbnail.jpg\u0026quot;  すると static/images/hoge/thumnail.jpg がサムネイル画像になる. サムネイル画像自体はpngでもsvgでも入れてくれる. 要はブラウザ側がそのファイル形式に対応できているかによる.\n目次の割当 記事の最初に目次をつけることもできる. デフォルトでは挿入されないが, フロントマターに以下を追記すると目次が表示されるようになる.\ntoc: true  画像の挿入 画像はShortcodeを使って挿入できる. 以下を本文中に挿入すれば良い. ただしShortcodeの前後は空行にしておくこと.\n\\{\\{% img src=\u0026quot;images/foo/bar.jpg\u0026quot; w=\u0026quot;600\u0026quot; h=\u0026quot;400\u0026quot; caption=\u0026quot;hoge\u0026quot; href=\u0026quot;https://example.com\u0026quot; %}}  captionとhrefは省略可能.\ndisqus導入 disqusに登録してshort nameを貰えれば, 後は config.toml を以下のように設定するだけ.\ndisqusShortname = \u0026quot;hoge\u0026quot;  copyright追加 copyrightを追加する. クリエイティブ・コモンズの画像なり文章なりを無理やり入れることで出来た. config.toml を以下のように設定した.\ncopyright = \u0026quot;Copyright \u0026amp;copy; 2017-2017, BrownieAlice.\u0026lt;br\u0026gt;\u0026lt;a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'\u0026gt;\u0026lt;img alt='クリエイティブ・コモンズ・ライセンス' style='border-width:0' src='https://i.creativecommons.org/l/by-sa/4.0/80x15.png' /\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt;このサイトのテキストは原則として \u0026lt;a rel='license' href='http://creativecommons.org/licenses/by-sa/4.0/'\u0026gt;クリエイティブ・コモンズ 表示 - 継承 4.0 国際 ライセンス\u0026lt;/a\u0026gt; の下に提供されています.\u0026quot;  すごい無理やり….\nカスタマイズ 一部はRobustのthemeを直接いじらないと設定できない.\nAbout追加 右のサイドバーにAboutを追加したい. これをするには layouts/partials フォルダを作りそこに sidebar.html を追加し中身を以下のようにする.\n\u0026lt;aside class=\u0026quot;l-sidebar\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;sections sidebar\u0026quot;\u0026gt; \u0026lt;section class=\u0026quot;sidebar\u0026quot;\u0026gt; \u0026lt;header\u0026gt;ABOUT\u0026lt;/header\u0026gt; \u0026lt;div\u0026gt; hogehogehoge. \u0026lt;br\u0026gt; \u0026lt;div align = \u0026quot;center\u0026quot;\u0026gt; \u0026lt;a href = \u0026quot;https://example.com/\u0026quot;\u0026gt;foo\u0026lt;/a\u0026gt; / \u0026lt;a href = \u0026quot;https://example.com/\u0026quot;\u0026gt;bar\u0026lt;/a\u0026gt; / \u0026lt;a href = \u0026quot;https://example.com/\u0026quot;\u0026gt;poyo\u0026lt;/a\u0026gt; / \u0026lt;a href = \u0026quot;https://example.com/\u0026quot;\u0026gt;piyo\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026quot;sidebar\u0026quot;\u0026gt; \u0026lt;header\u0026gt;LATESTS\u0026lt;/header\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;articles sm\u0026quot;\u0026gt; {{ range $i, $p := (first 10 .Site.Pages) }} {{ .Render \u0026quot;li_sm\u0026quot; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{ range $key, $value := .Site.Taxonomies }} \u0026lt;section class=\u0026quot;sidebar\u0026quot;\u0026gt; \u0026lt;header\u0026gt;{{ $key | upper }}\u0026lt;/header\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul class=\u0026quot;terms\u0026quot;\u0026gt; {{ range first 10 $value.ByCount }}\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{ $.Site.BaseURL}}{{ $key }}/{{ .Name | urlize }}\u0026quot;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;{{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt;  実はほとんどrobustの layouts/parials/sidebar.html のコピー. それを少し改変しただけ. themes/layouts より layouts のほうが優先されるのでthemes フォルダを直接いじることなくカスタマイズすることができる.\nfavicon追加 iPhone向けのlogoは static/images/logo.png を配置すればすむ. ただ普通は林檎みたいな産業廃棄物は使わないのでちゃんと設定しないといけない.\nlayouts/partials フォルダに meta.html を作り中身を以下のようにする.\n\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;pinterest\u0026quot; content=\u0026quot;nopin\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,minimum-scale=1,initial-scale=1\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;theme-color\u0026quot; content=\u0026quot;#263238\u0026quot;\u0026gt; {{ with .Site.Params.contact }}\u0026lt;meta name=\u0026quot;contact\u0026quot; content=\u0026quot;{{ . }}\u0026quot;\u0026gt;{{ end }} {{ .Hugo.Generator }} \u0026lt;link rel=\u0026quot;apple-touch-icon\u0026quot; href=\u0026quot;{{ .Site.BaseURL }}images/logo.png\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;shortcut icon\u0026quot; type=\u0026quot;image/x-icon\u0026quot; href=\u0026quot;{{ .Site.BaseURL }}favicon.ico\u0026quot;\u0026gt; {{ with .RSSLink }}\u0026lt;link rel=\u0026quot;alternate\u0026quot; type=\u0026quot;application/rss+xml\u0026quot; title=\u0026quot;RSS\u0026quot; href=\u0026quot;{{ . }}\u0026quot;\u0026gt;{{ end }} \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;  そうしたあと static フォルダに favicon.ico を配置すればアイコンが表示されるようになる.\n参考サイト dim0627/hugo_theme_robust\nHUGO のテーマ Robust のカスタマイズ - zzzmisa\u0026#39;s blog\nGithub Pages/Hugoでブログを作成してみた - A1 Blog\n"
},
{
	"uri": "https://wiki.browniealice.net/technote/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": " Hugoについて Hugo は静的サイトジェネレータの1つ. Markdownで記事を書いて所定のプログラムを動かせば静的なサイトが生成される.\n直接HTMLを叩かなくて済むので楽. またGitHub Pagesを用いれば簡単にWebサイトを公開できるので便利.\nBlog と wiki もHugoを用いて作成している\n"
},
{
	"uri": "https://wiki.browniealice.net/technote/",
	"title": "TechNote",
	"tags": [],
	"description": "",
	"content": " TechNoteについて プログラミング関連の事項をまとめています.\n特にそれなりの頻度で用いる設定などを備忘録的に記載していきます.\n"
},
{
	"uri": "https://wiki.browniealice.net/_header/",
	"title": "_Header",
	"tags": [],
	"description": "",
	"content": "Alice in the Machine - wiki\n"
},
{
	"uri": "https://wiki.browniealice.net/",
	"title": "Alice in the Machine - wiki",
	"tags": [],
	"description": "",
	"content": " Alice in the Machine - wiki このサイトについて このサイトは私がプログラミング時やレポート製作時などに調べた内容などをまとめていくwikiです.\n基本的には私個人が使うためのものです.\n"
},
{
	"uri": "https://wiki.browniealice.net/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wiki.browniealice.net/categories/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
}]